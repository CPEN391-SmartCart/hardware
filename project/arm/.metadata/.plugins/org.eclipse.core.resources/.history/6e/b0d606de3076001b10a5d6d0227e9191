/*
 * main.c
 *
 *  Created on: Feb 21, 2021
 *      Author: jared
 */

#include "bluetooth/bluetooth.h"
#include "wifi/wifi.h"
#include "common.h"
#include "stdio.h"

#include "wifi/wifi.h"
#include "uart/uart.h"

#include "delay/delay.h"

int exec_lua(char * str, char * res);

int main(void)
{
    char stringBT[1024];
    char stringWIFI[1024];
    char c;
    int i = 0;
    int j = 0;
    int k = 0;
    int o = 0;

    // initialize the serial port;
    // needs to be done according to the chip
    // to use just change the Bluetooth PART, same idea for put char and get char for the arguments
    initWiFi(115200);
    resetWiFi();
    delay_us(3 * 1000 * 1000);

    while (TRUE)
     {
         writeStringWIFI("AT\r\n");

         readStringWIFI(stringWIFI);
         printf("TEST: %s\n", stringWIFI);
     }

    while (i < 1000000)
    {
    	if (dataReadyUART(WiFi_LineStatusReg))
    	{
    		stringBT[j++] = readCharUART(WiFi_LineStatusReg, WiFi_ReceiverFifo);
    	}

    	i++;
    }

    stringBT[j] = '\0';
    printf("test: %s\n", stringBT);
	return 0;
}

int exec_lua(char * str, char * res) {
	int i;
	int bytes_received = 0;
	printf("executing %s as a Lua command\n", str);
	while (*str) {
		for(i = 0; i < 1000; i++) {;}
		writeCharUART(*str, WiFi_LineStatusReg, WiFi_TransmitterFifo);
		str += 1;
		for(i = 0; i < 1000; i++) {;}
		if(dataReadyUART(WiFi_LineStatusReg) == 1) {
			res[bytes_received++] = (char) readCharUART(WiFi_LineStatusReg, WiFi_ReceiverFifo);
		}
	}
	writeCharUART('\n', WiFi_LineStatusReg , WiFi_ReceiverFifo);
    for(i = 0; i < 200000; i++) {
        if(dataReadyUART(WiFi_LineStatusReg) == 1) {
        	res[bytes_received++] = (char) readCharUART(WiFi_LineStatusReg, WiFi_ReceiverFifo);
            i = 0 ; // reset timer if we got something back
        }
    }
	printf("Got %u bytes\n", bytes_received);
	res[bytes_received] = '\0';
	return bytes_received;
}
