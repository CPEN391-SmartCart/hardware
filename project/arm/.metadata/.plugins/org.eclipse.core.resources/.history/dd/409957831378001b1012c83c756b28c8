/*
 * hx711.c
 *
 *  Created on: Feb 26, 2021
 *      Author: jared
 */

#include "hx711.h"
#include "../io/digital.h"

uint8_t GAIN = 1;
long OFFSET;
float SCALE;

uint8_t is_ready()
{
	return digitalRead(DT) == LOW;
}

void set_gain(uint8_t gain = 128)
{
	switch (gain)
	{
		case 128:
			GAIN = 1;
			break;
		case 64:
			GAIN = 3;
			break;
		case 32:
			GAIN = 2;
			break;
	}

	digitalWrite(SCK, LOW);
	read();
}

long read()
{
	while (!is_ready());

	unsigned long value = 0;
	uint8_t data[3] = { 0 };
	uint8_t filler = 0x00;

	data[2] = shiftInMSB(DT, SCK);
	data[1] = shiftInMSB(DT, SCK);
	data[0] = shiftInMSB(DT, SCK);

	for (unsigned int i = 0; i < GAIN; i++)
	{
		digitalWrite(SCK, HIGH);
		digitalWrite(SCK, LOW);
	}

	data[2] = ~data[2];
	data[1] = ~data[1];
	data[0] = ~data[0];

	if (data[2] & 0x80)
	{
		filler = 0xFF;
	}
	else if ((data[2] == 0x7F) && (data[1] == 0xFF) && (data[0] == 0xFF))
	{
		filler = 0xFF;
	}
	else
	{
		filler = 0x00;
	}

	value = (
			(unsigned long)(filler) << 24 |
			(unsigned long)(data[2]) << 16 |
			(unsigned long)(data[1]) << 8 |
			(unsigned long)(data[0])
	);

	return (long)(++value);
}

long read_average(uint8_t times = 10)
{
	long sum = 0;
	for (uint8_t i = 0; i < times; i++)
	{
		sum += read();
	}
	return sum / times;
}

double get_value(uint8_t times = 1)
{
	return read_average(times) - OFFSET;
}

float get_units(uint8_t times = 1)
{
	return get_value(times) / SCALE;
}

void tare(uint8_t times = 10)
{
	double sum = read_average(times);
	set_offset(sum);
}

void set_scale(float scale = 1.0f)
{
	SCALE = scale;
}

float get_scale()
{
	return SCALE;
}

void set_offset(long offset = 0)
{
	OFFSET = offset;
}

long get_offset()
{
	return OFFSET;
}

void power_down()
{
	digitalWrite(SCK, LOW);
	digitalWrite(SCK, HIGH);
}

void power_up()
{
	digitalWrite(SCK, LOW);
}
